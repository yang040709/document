import{_ as n,c as a,o as i,ah as e}from"./chunks/framework.CitoaWpm.js";const k=JSON.parse('{"title":"1.基础","description":"","frontmatter":{},"headers":[],"relativePath":"vue3/index.md","filePath":"vue3/index.md","lastUpdated":1758365489000}'),p={name:"vue3/index.md"};function l(r,s,t,h,c,d){return i(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="_1-基础" tabindex="-1">1.基础 <a class="header-anchor" href="#_1-基础" aria-label="Permalink to “1.基础”">​</a></h1><h2 id="_1-两个-vue-版本的区别" tabindex="-1">1.两个 vue 版本的区别 <a class="header-anchor" href="#_1-两个-vue-版本的区别" aria-label="Permalink to “1.两个 vue 版本的区别”">​</a></h2><p>当根组件没有设置 template 选项时，Vue 将自动使用容器的 innerHTML 作为模板。</p><p>一个版本的 vue 是包含模板编译器的，另一个版本就没有。</p><p>在使用构建工具进行编程的过程中构建工具会帮你处理模板，在运行的过程中不需要模板编译器。</p><p>下面是在 html 直接写 vue 代码，需要使用带有模板编译器版本的 vue</p><p>根组件的模板通常是组件本身的一部分，但也可以直接通过在挂载容器内编写模板来单独提供：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>&lt;div id=&quot;app&quot;&gt;</span></span>
<span class="line"><span>  &lt;button @click=&quot;count++&quot;&gt;{{ count }}&lt;/button&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>js</span></span>
<span class="line"><span>import { createApp } from &#39;vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const app = createApp({</span></span>
<span class="line"><span>  data() {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      count: 0</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.mount(&#39;#app&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>当以无构建步骤方式使用 Vue 时，组件模板要么是写在页面的 HTML 中，要么是内联的 JavaScript 字符串。在这些场景中，为了执行动态模板编译，Vue 需要将模板编译器运行在浏览器中。相对的，如果我们使用了构建步骤，由于提前编译了模板，那么就无须再在浏览器中运行了。为了减小打包出的客户端代码体积，Vue 提供了<a href="https://unpkg.com/browse/vue@3/dist/" target="_blank" rel="noreferrer">多种格式的“构建文件”</a>以适配不同场景下的优化需求。</p><ul><li>前缀为 <code>vue.runtime.*</code> 的文件是<strong>只包含运行时的版本</strong>：不包含编译器，当使用这个版本时，所有的模板都必须由构建步骤预先编译。</li><li>名称中不包含 <code>.runtime</code> 的文件则是<strong>完全版</strong>：即包含了编译器，并支持在浏览器中直接编译模板。然而，体积也会因此增长大约 14kb。</li></ul><p>默认的工具链中都会使用仅含运行时的版本，因为所有单文件组件中的模板都已经被预编译了。如果因为某些原因，在有构建步骤时，你仍需要浏览器内的模板编译，你可以更改构建工具配置，将 <code>vue</code> 改为相应的版本 <code>vue/dist/vue.esm-bundler.js</code>。</p><p>如果你需要一种更轻量级，不依赖构建步骤的替代方案，也可以看看 <a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noreferrer">petite-vue</a>。</p><h2 id="_2-vue-的全局错误捕获" tabindex="-1">2.vue 的全局错误捕获 <a class="header-anchor" href="#_2-vue-的全局错误捕获" aria-label="Permalink to “2.vue 的全局错误捕获”">​</a></h2><p>Vue 3 的 <code>app.config.errorHandler</code> 🛡️ 是项目中<strong>非常重要且常用</strong>的全局错误处理机制。它主要用于捕获和处理 Vue 应用内<strong>未捕获的运行时错误</strong>，是提升应用健壮性和用户体验的关键一环。</p><p>下面是一个表格，汇总了 <code>app.config.errorHandler</code> 在项目不同阶段的核心用途：</p><table tabindex="0"><thead><tr><th style="text-align:left;">阶段</th><th style="text-align:left;">主要目标</th><th style="text-align:left;">核心应用</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>开发阶段</strong></td><td style="text-align:left;"><strong>调试与定位</strong></td><td style="text-align:left;">在控制台输出详细错误信息，帮助快速定位和修复问题。</td></tr><tr><td style="text-align:left;"><strong>生产阶段</strong></td><td style="text-align:left;"><strong>监控与体验</strong></td><td style="text-align:left;">捕获错误并上报至监控平台，同时为用户展示友好提示，避免白屏。</td></tr></tbody></table><p><code>errorHandler</code> 函数接收三个参数 ：</p><ol><li><code>err</code>：捕获到的错误对象，包含错误的详细信息（如错误消息、堆栈跟踪）。</li><li><code>vm</code>：触发该错误的 Vue 组件实例。通过这个实例，你可以访问组件的状态、数据和方法，有助于更精确地定位问题。</li><li><code>info</code>：一个字符串，提供了关于错误发生位置或上下文的 Vue 特定信息。常见的值包括： <ul><li><code>&#39;render function&#39;</code>：组件渲染函数中的错误。</li><li><code>&#39;event handler&#39;</code>：事件处理函数中的错误。</li><li><code>&#39;mounted hook&#39;</code>：<code>mounted</code> 生命周期钩子中的错误。</li><li><code>&#39;setup function&#39;</code>：<code>setup</code> 函数中的错误。</li><li><code>&#39;watcher callback&#39;</code>：侦听器回调中的错误。</li><li><code>&#39;directive hook&#39;</code>：自定义指令钩子中的错误。</li><li><code>&#39;transition hook&#39;</code>：过渡钩子中的错误。</li></ul></li></ol><h3 id="项目中如何使用" tabindex="-1">项目中如何使用 <a class="header-anchor" href="#项目中如何使用" aria-label="Permalink to “项目中如何使用”">​</a></h3><h4 id="_1-基本配置-在-main-js-或-main-ts-中" tabindex="-1">1. 基本配置（在 <code>main.js</code> 或 <code>main.ts</code> 中） <a class="header-anchor" href="#_1-基本配置-在-main-js-或-main-ts-中" aria-label="Permalink to “1. 基本配置（在 main.js 或 main.ts 中）”">​</a></h4><p>通常在创建 Vue 应用实例后立即配置。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>import { createApp } from &#39;vue&#39;</span></span>
<span class="line"><span>import App from &#39;./App.vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const app = createApp(App)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 配置全局错误处理器</span></span>
<span class="line"><span>app.config.errorHandler = (err, vm, info) =&gt; {</span></span>
<span class="line"><span>  // err: 捕获到的错误对象</span></span>
<span class="line"><span>  // vm: 发生错误的组件实例（在 Vue 3.3+ 中可能为 null）</span></span>
<span class="line"><span>  // info: Vue 特定的错误信息字符串（如 &#39;render function&#39;, &#39;onCreated hook&#39;）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 这里编写你的错误处理逻辑</span></span>
<span class="line"><span>  console.error(&#39;Global error caught:&#39;, err)</span></span>
<span class="line"><span>  console.log(&#39;Error in component:&#39;, vm)</span></span>
<span class="line"><span>  console.log(&#39;Error origin:&#39;, info)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.mount(&#39;#app&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_2-开发阶段-development" tabindex="-1">2. 开发阶段（Development） <a class="header-anchor" href="#_2-开发阶段-development" aria-label="Permalink to “2. 开发阶段（Development）”">​</a></h4><p>在开发模式下，<code>errorHandler</code> 的核心作用是<strong>辅助调试</strong>。</p><ul><li><strong>详细输出</strong>：在控制台打印完整的错误信息、组件实例和错误来源（<code>info</code>），帮助开发者快速定位问题所在的生命周期钩子、渲染函数或计算属性等。</li><li><strong>与 DevTools 协同</strong>：结合 Vue DevTools 进行深度调试。<code>errorHandler</code> 提供了错误发生的上下文，而 DevTools 可以帮助你检查组件树、状态和事件。</li></ul><h4 id="_3-生产阶段-production" tabindex="-1">3. 生产阶段（Production） <a class="header-anchor" href="#_3-生产阶段-production" aria-label="Permalink to “3. 生产阶段（Production）”">​</a></h4><p>构建上线后，<code>errorHandler</code> 的角色转变为<strong>应用监控和用户体验守护者</strong>。</p><ul><li><p><strong>错误上报 (Crucial)</strong>：这是生产环境最重要的功能。将捕获的错误信息（如 <code>err.message</code>, <code>err.stack</code>, <code>info</code>）发送到你的监控平台（如 <strong>Sentry</strong>, <strong>Fundebug</strong>, 或自建服务）。这能让你及时发现并修复线上问题。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>app.config.errorHandler = (err, vm, info) =&gt; {</span></span>
<span class="line"><span>  // 示例：上报错误到 Sentry（需先集成 Sentry SDK）</span></span>
<span class="line"><span>  if (window.$sentry) {</span></span>
<span class="line"><span>    window.$sentry.captureException(err, {</span></span>
<span class="line"><span>      tags: { component: vm?.$options.name, error_info: info }</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 或者上报到你自己的日志服务</span></span>
<span class="line"><span>  myErrorReportingService.log(err, vm, info)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p><strong>友好的用户反馈</strong>：避免让用户看到崩溃的白屏或控制台错误。可以展示一个友好的错误提示组件或消息。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>import { showGlobalErrorToast } from &#39;./utils/feedback&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.config.errorHandler = (err, vm, info) =&gt; {</span></span>
<span class="line"><span>  // ... 错误上报逻辑 ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 提示用户</span></span>
<span class="line"><span>  showGlobalErrorToast(&#39;抱歉，应用出了点小问题。请稍后重试或联系支持。&#39;)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h4 id="_4-区分环境配置" tabindex="-1">4. 区分环境配置 <a class="header-anchor" href="#_4-区分环境配置" aria-label="Permalink to “4. 区分环境配置”">​</a></h4><p>在实际项目中，我们通常会根据环境变量来调整 <code>errorHandler</code> 的行为。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>app.config.errorHandler = (err, vm, info) =&gt; {</span></span>
<span class="line"><span>  // 1. 错误上报：生产和开发环境都可能需要，但上报的详细程度或目标可能不同</span></span>
<span class="line"><span>  if (import.meta.env.PROD) {</span></span>
<span class="line"><span>    // 生产环境：上报到正式的监控平台</span></span>
<span class="line"><span>    myProductionErrorService.report(err, vm, info)</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    // 开发环境：可能只记录到控制台，或上报到测试环境</span></span>
<span class="line"><span>    console.error(&#39;Dev Error:&#39;, err, info)</span></span>
<span class="line"><span>    myDevErrorService.log(err) // 可选</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 2. 用户界面反馈：通常只在生产环境展示友好提示，避免干扰开发调试</span></span>
<span class="line"><span>  if (import.meta.env.PROD) {</span></span>
<span class="line"><span>    showUserFriendlyErrorMessage()</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="⚠️-注意事项与局限性" tabindex="-1">⚠️ 注意事项与局限性 <a class="header-anchor" href="#⚠️-注意事项与局限性" aria-label="Permalink to “⚠️ 注意事项与局限性”">​</a></h3><ol><li><p><strong>并非“万能”</strong>：<code>app.config.errorHandler</code> 主要捕获的是： Vue 组件渲染函数中的错误 观察者（Watcher）回调函数中的错误 生命周期钩子中的错误 自定义指令钩子中的错误 <code>setup()</code> 函数中的错误</p></li><li><p><strong>无法捕获以下错误</strong>：</p><ul><li><strong>事件处理函数内部的异步错误</strong>（如 <code>setTimeout</code>, <code>Promise</code> 内的错误）。</li><li><strong>全局事件监听器</strong>（如通过 <code>window.addEventListener</code> 添加的）中的错误。</li><li><strong>异步回调</strong>（如 <code>setTimeout</code>、<code>setInterval</code>、<code>Promise</code> 的 <code>then</code>/catch 链中未被处理的错误）通常需要 <code>window.onunhandledrejection</code> 来捕获。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>// 需要单独处理异步错误</span></span>
<span class="line"><span>window.addEventListener(&#39;unhandledrejection&#39;, (event) =&gt; {</span></span>
<span class="line"><span>  console.error(&#39;Unhandled Promise rejection:&#39;, event.reason)</span></span>
<span class="line"><span>  // 同样可以在这里上报错误</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>与 <code>errorCaptured</code> 的关系</strong>：组件生命周期钩子 <code>errorCaptured</code> 可以捕获其子孙组件中发生的错误。它可以决定是否阻止错误继续向上冒泡到全局的 <code>errorHandler</code>（通过返回 <code>false</code>）。</p></li><li><p><strong>避免在 <code>errorHandler</code> 中抛出错误</strong>：确保你的错误处理器本身非常健壮，否则可能导致无限循环。</p></li></ol><h3 id="💡-进阶用法-结合错误边界-error-boundary" tabindex="-1">💡 进阶用法：结合错误边界 (Error Boundary) <a class="header-anchor" href="#💡-进阶用法-结合错误边界-error-boundary" aria-label="Permalink to “💡 进阶用法：结合错误边界 (Error Boundary)”">​</a></h3><p>在大型项目中，你可以考虑实现类似 React 的“错误边界”概念。即创建一个专用组件，利用 <code>errorCaptured</code> 钩子捕获其整个子树内的错误，并在组件内部优雅地降级显示，而不是让整个应用崩溃或每次都触发全局处理。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>&lt;!-- ErrorBoundary.vue --&gt;</span></span>
<span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>  &lt;div v-if=&quot;hasError&quot;&gt;</span></span>
<span class="line"><span>    &lt;h2&gt;Something went wrong in this section.&lt;/h2&gt;</span></span>
<span class="line"><span>    &lt;button @click=&quot;tryToRecover&quot;&gt;Try Again&lt;/button&gt;</span></span>
<span class="line"><span>    &lt;!-- 可展示详细的友好错误信息 --&gt;</span></span>
<span class="line"><span>  &lt;/div&gt;</span></span>
<span class="line"><span>  &lt;slot v-else&gt;&lt;/slot&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;script setup&gt;</span></span>
<span class="line"><span>import { ref, onErrorCaptured } from &#39;vue&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const hasError = ref(false)</span></span>
<span class="line"><span>const error = ref(null)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>onErrorCaptured((err, instance, info) =&gt; {</span></span>
<span class="line"><span>  error.value = err</span></span>
<span class="line"><span>  hasError.value = true</span></span>
<span class="line"><span>  // 可以在这里上报该边界内的错误</span></span>
<span class="line"><span>  myErrorReportingService.log(err, instance, info)</span></span>
<span class="line"><span>  // 阻止错误继续冒泡到全局 handler，实现局部降级</span></span>
<span class="line"><span>  return false</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function tryToRecover() {</span></span>
<span class="line"><span>  hasError.value = false</span></span>
<span class="line"><span>  error.value = null</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>然后在可能出错的组件外围使用它：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>&lt;ErrorBoundary&gt;</span></span>
<span class="line"><span>  &lt;UnstableComponent /&gt;</span></span>
<span class="line"><span>&lt;/ErrorBoundary&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="💎-总结" tabindex="-1">💎 总结 <a class="header-anchor" href="#💎-总结" aria-label="Permalink to “💎 总结”">​</a></h3><p><code>app.config.errorHandler</code> 在正常项目中<strong>肯定会使用</strong>，它是 Vue 应用错误处理体系的基石。</p><ul><li><strong>开发时</strong>：它是你<strong>调试的得力助手</strong>，通过控制台输出精准定位问题。</li><li><strong>构建后</strong>：它是应用的<strong>安全网和哨兵</strong>，负责捕获未预料错误、上报日志、并优雅地通知用户。</li></ul><p>最佳实践是：<strong>将其与 <code>window.onunhandledrejection</code>、组件级的 <code>errorCaptured</code> 或“错误边界”、以及异步操作中的 <code>try/catch</code> 结合起来</strong>，构建一个多层次、全方位的错误处理防御系统，从而极大提升应用的健壮性和用户体验。</p><h2 id="_3-props-技巧" tabindex="-1">3.props 技巧 <a class="header-anchor" href="#_3-props-技巧" aria-label="Permalink to “3.props 技巧”">​</a></h2><p>1.同名简写 仅支持 3.4 版本及以上 如果 attribute 的名称与绑定的 JavaScript 变量的名称相同，那么可以进一步简化语法，省略 attribute 值：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>&lt;!-- 与 :id=&quot;id&quot; 相同 --&gt;</span></span>
<span class="line"><span>&lt;div :id&gt;&lt;/div&gt;</span></span>
<span class="line"><span>&lt;!-- 这也同样有效 --&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;div v-bind:id&gt;&lt;/div&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这与在 JavaScript 中声明对象时使用的属性简写语法类似。请注意，这是一个只在 Vue 3.4 及以上版本中可用的特性。</p><p>2.动态绑定多个值 如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>const objectOfAttrs = {</span></span>
<span class="line"><span>  id: &#39;container&#39;,</span></span>
<span class="line"><span>  class: &#39;wrapper&#39;,</span></span>
<span class="line"><span>  style: &#39;background-color:green&#39;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过不带参数的 v-bind，你可以将它们绑定到单个元素上：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>&lt;div v-bind=&quot;objectOfAttrs&quot;&gt;&lt;/div&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是这样使用其实有一些坑</p><p>1.ref 无法自动解构，如果你传进去的时候是对象</p><p>如果你使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./child.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> var1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> var2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> childProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prop1: var1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prop2: var2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;You did it!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- &lt;child :prop1=&quot;var1&quot; :prop2=&quot;var2&quot; /&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">child</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;childProps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;var1++&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Click me&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;var2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>那么结果是：</p><p>并没有帮你自动解构你传进去的 ref</p><p>你可以通过</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>const childProps = reactive({</span></span>
<span class="line"><span>  prop1: var1,</span></span>
<span class="line"><span>  prop2: var2,</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>来顺利解决</p><p>2.dom 属性会被自动绑定</p><p><strong>DOM 属性 vs HTML 属性</strong> 对象里如果出现 <code>value: 123</code>、<code>checked: true</code>、<code>indeterminate: true</code> 这类<strong>只有 DOM 属性才认</strong>的字段，会被 Vue 当成 <strong>HTML attribute</strong> 写进去，结果字符串化后失灵。 解决：在对象里用 <code>valueProp</code>、<code>checkedProp</code> 等名字，再单独 <code>:value.prop=&quot;obj.valueProp&quot;</code>；或把对象拆成 <code>domProps</code> / <code>attr</code> 两个对象。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./child.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> var1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> var2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const childProps = reactive({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   prop1: var1,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   prop2: var2,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> childProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prop1: var1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prop2: var2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;You did it!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- &lt;child :prop1=&quot;var1&quot; :prop2=&quot;var2&quot; /&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">child</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;childProps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;var1++&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Click me&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;var2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>`,62)])])}const b=n(p,[["render",l]]);export{k as __pageData,b as default};
